AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An infrastructure for user info and user images.

Resources:
  UserImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: user-images-bucket-2023-0907
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "PUT"
              - "POST"
              - "GET"
            AllowedOrigins:
              - "*"
            MaxAge: 3000

  UserImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UserImagesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowPublicPut
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
            Resource:
              Fn::Sub: arn:aws:s3:::${UserImagesBucket}/*

  UserDataTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: UserData
      PrimaryKey:
        Name: username
        Type: String

  LikesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Likes
      AttributeDefinitions:
        - AttributeName: user
          AttributeType: S
        - AttributeName: likedUser
          AttributeType: S
      KeySchema:
        - AttributeName: user
          KeyType: HASH
        - AttributeName: likedUser
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: likedUser-index
          KeySchema:
            - AttributeName: likedUser
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # Cognito Identity Poolの作成
  CognitoIdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: momento-workshop
      AllowUnauthenticatedIdentities: true

  # IAM Role for Unauthenticated Users
  UnauthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: momento-workshop-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                'cognito-identity.amazonaws.com:amr': 'unauthenticated'
      Policies:
        - PolicyName: UnauthCognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:*'
                  - 's3:*'
                Resource: '*'

  # Associate the IAM roles with the Cognito Identity Pool
  CognitoIdentityPoolRoles:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        unauthenticated: !GetAtt UnauthRole.Arn